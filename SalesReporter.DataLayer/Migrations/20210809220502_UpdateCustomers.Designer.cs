// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesReporter.DataLayer;

namespace SalesReporter.DataLayer.Migrations
{
    [DbContext(typeof(SalesReporterContext))]
    [Migration("20210809220502_UpdateCustomers")]
    partial class UpdateCustomers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SalesReporter.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SalesReporter.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = "2452ca0b-13a8-499e-b7cd-82ef0cb0d3bc",
                            City = "Enlow",
                            FirstName = "Bethany",
                            LastName = "Schroeder",
                            Phone = "(844) 539-3422",
                            Street = "Riverdale Avenue",
                            ZipCode = "35857"
                        },
                        new
                        {
                            CustomerId = "b49c2428-d020-46e9-90be-e9725c772b4e",
                            City = "Belfair",
                            FirstName = "Adele",
                            LastName = "Moss",
                            Phone = "(988) 428-2435",
                            Street = "Coffey Street",
                            ZipCode = "35856"
                        },
                        new
                        {
                            CustomerId = "d5d78f36-290c-4d5b-bec2-77a836cc4e6e",
                            City = "Dahlen",
                            FirstName = "Powell",
                            LastName = "Stone",
                            Phone = "(856) 430-2295",
                            Street = "Plaza Street",
                            ZipCode = "35850"
                        },
                        new
                        {
                            CustomerId = "22786b90-4554-4fd5-ac5a-a4aa3edb9c55",
                            City = "Lopezo",
                            FirstName = "Lilia",
                            LastName = "Parsons",
                            Phone = "(983) 547-2639",
                            Street = "Vandalia Avenue",
                            ZipCode = "95856"
                        },
                        new
                        {
                            CustomerId = "3529d5c3-13be-4903-b0d4-0d468a0941e3",
                            City = "Steinhatchee",
                            FirstName = "Reilly",
                            LastName = "Cunningham",
                            Phone = "(882) 437-3366",
                            Street = "Oakland Place",
                            ZipCode = "33886"
                        },
                        new
                        {
                            CustomerId = "d72abb87-aa6e-476c-a77f-ac4023df752b",
                            City = "Wattsville",
                            FirstName = "Tamara",
                            LastName = "Holman",
                            Phone = "(985) 554-3493",
                            Street = "Florence Avenue",
                            ZipCode = "33856"
                        },
                        new
                        {
                            CustomerId = "a0214e01-d7dd-47d5-8832-e7608dd954dd",
                            City = "Caron",
                            FirstName = "Edna",
                            LastName = "May",
                            Phone = "(993) 493-3490",
                            Street = "Harbor Court",
                            ZipCode = "35898"
                        },
                        new
                        {
                            CustomerId = "f2a88666-d226-4316-9d31-e879dd334e3c",
                            City = "Motley",
                            FirstName = "Heidi",
                            LastName = "Rivers",
                            Phone = "(865) 475-3915",
                            Street = "Verona Street",
                            ZipCode = "35856"
                        },
                        new
                        {
                            CustomerId = "74082c2b-b50e-4d37-8b6d-ffa63e8d26ae",
                            City = "Abrams",
                            FirstName = "Christine",
                            LastName = "Cameron",
                            Phone = "(928) 422-3334",
                            Street = "Ivan Court",
                            ZipCode = "34856"
                        },
                        new
                        {
                            CustomerId = "e351da94-ee13-4540-9299-7fcf95205ae0",
                            City = "Fontanelle",
                            FirstName = "Rodriguez",
                            LastName = "Battle",
                            Phone = "(857) 554-3947",
                            Street = "River Street",
                            ZipCode = "35855"
                        },
                        new
                        {
                            CustomerId = "d379f1b4-e090-4e94-ba0a-b26873bf2060",
                            City = "Orason",
                            FirstName = "Jodie",
                            LastName = "Villarreal",
                            Phone = "(877) 596-4000",
                            Street = "Love Lane",
                            ZipCode = "35756"
                        },
                        new
                        {
                            CustomerId = "7256e251-bf53-4914-a8d4-1d588457d391",
                            City = "Dargan",
                            FirstName = "Susana",
                            LastName = "Walters",
                            Phone = "(950) 562-2546",
                            Street = "Miami Court",
                            ZipCode = "35856"
                        },
                        new
                        {
                            CustomerId = "b0e89d76-96df-4986-8949-6218f3c99625",
                            City = "Roland",
                            FirstName = "Nadine",
                            LastName = "Snider",
                            Phone = "(921) 584-2672",
                            Street = "Legion Street",
                            ZipCode = "35890"
                        },
                        new
                        {
                            CustomerId = "743d4ca5-f460-41ce-9169-73910dce6672",
                            City = "Duryea",
                            FirstName = "Corine",
                            LastName = "Rodriquez",
                            Phone = "(894) 536-3453",
                            Street = "Dwight Street",
                            ZipCode = "35859"
                        },
                        new
                        {
                            CustomerId = "49ac076a-6f3b-4ed8-9512-fd5f4cb53b43",
                            City = "Rodman",
                            FirstName = "Clark",
                            LastName = "Benton",
                            Phone = "(896) 475-3153",
                            Street = "Williams Court",
                            ZipCode = "35896"
                        },
                        new
                        {
                            CustomerId = "1698c7a5-03c5-4f03-adcd-34dffe2771bd",
                            City = "Rose",
                            FirstName = "Shirley",
                            LastName = "Murray",
                            Phone = "(855) 493-2038",
                            Street = "Gem Street",
                            ZipCode = "35847"
                        },
                        new
                        {
                            CustomerId = "49671ecf-cfe5-4493-8206-3b0464eb4781",
                            City = "Nash",
                            FirstName = "Gwendolyn",
                            LastName = "Parks",
                            Phone = "(973) 540-3779",
                            Street = "Dakota Place",
                            ZipCode = "35856"
                        },
                        new
                        {
                            CustomerId = "0f3bb335-5bac-4037-807c-b0c53833ebf2",
                            City = "Unionville",
                            FirstName = "Jocelyn",
                            LastName = "Wilder",
                            Phone = "(814) 592-2250",
                            Street = "Albemarle Road",
                            ZipCode = "35857"
                        },
                        new
                        {
                            CustomerId = "7c85e6e8-a378-4fa8-ac1f-80435c75da9e",
                            City = "Williamson",
                            FirstName = "Noreen",
                            LastName = "Dejesus",
                            Phone = "(966) 471-2919",
                            Street = "Thames Street",
                            ZipCode = "35866"
                        },
                        new
                        {
                            CustomerId = "f2e88107-4530-4ae3-93a7-08f3214e6475",
                            City = "Camino",
                            FirstName = "Blackwell",
                            LastName = "Maynard",
                            Phone = "(805) 503-2117",
                            Street = "Metrotech Courtr",
                            ZipCode = "35756"
                        });
                });

            modelBuilder.Entity("SalesReporter.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderFulfilled")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipperId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShipperId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SalesReporter.Models.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SalesReporter.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SalesReporter.Models.Shipper", b =>
                {
                    b.Property<string>("ShipperId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShipperId");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("SalesReporter.Models.Supplier", b =>
                {
                    b.Property<string>("SupplierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("SalesReporter.Models.Order", b =>
                {
                    b.HasOne("SalesReporter.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SalesReporter.Models.Shipper", "Shipper")
                        .WithMany("Order")
                        .HasForeignKey("ShipperId");

                    b.Navigation("Customer");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("SalesReporter.Models.OrderDetail", b =>
                {
                    b.HasOne("SalesReporter.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("SalesReporter.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesReporter.Models.Product", b =>
                {
                    b.HasOne("SalesReporter.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SalesReporter.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("SalesReporter.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SalesReporter.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SalesReporter.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SalesReporter.Models.Shipper", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("SalesReporter.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
